<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.example"/>
    <context:property-placeholder location="classpath:application.properties" ignore-unresolvable="true"/>


    <!--jpa配置开始-->
    <!--JQY库 -->
    <bean id="dataSourceJqy" class="org.apache.tomcat.jdbc.pool.DataSource"
          destroy-method="close">
        <property name="driverClassName" value="${DB.JQY.DRIVER}"/>
        <property name="maxActive" value="200"/>
        <property name="url" value="${DB.JQY.URL}"/>
        <property name="username" value="${DB.JQY.USER}"/>
        <property name="password" value="${DB.JQY.PASSWORD}"/>
        <property name="initialSize" value="${DB.JQY.INITIALSIZE}"/>
        <property name="maxIdle" value="${DB.JQY.MAXIDLE}"/>
        <property name="minIdle" value="${DB.JQY.MINIDLE}"/>
        <property name="validationQuery" value="${DB.JQY.VALIDATE.QUERY}"/>
        <property name="testWhileIdle" value="${DB.JQY.TEST.WHILE.IDLE}"/>
    </bean>

    <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
          id="entityManagerFactoryJqy">
        <!-- 关键是这里要指定entity类所在的包-->
        <property name="packagesToScan"
                  value="com.example"/>
        <property name="dataSource" ref="dataSourceJqy"/>
        <property name="persistenceProvider">
            <bean class="org.hibernate.ejb.HibernatePersistence"/>
            <!-- 用于指定持久化实现厂商类 -->
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.connection.charSet">UTF-8</prop>
                <prop key="show_sql">false</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.max_fetch_depth">0</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManagerJqy" class="org.springframework.orm.jpa.JpaTransactionManager"
          p:entityManagerFactory-ref="entityManagerFactoryJqy">
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManagerJqy"/>

    <jpa:repositories
            base-package="com.example"
            entity-manager-factory-ref="entityManagerFactory"
            transaction-manager-ref="transactionManager"/>

    <!--JPA配置结束 -->

    <!--&lt;!&ndash;redis配置开始 &ndash;&gt;-->
    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="minIdle" value="8" />-->
        <!--<property name="maxIdle" value="50" />-->
        <!--<property name="maxTotal" value="200" />-->
        <!--<property name="maxWaitMillis" value="-1" />-->
    <!--</bean>-->
    <!--<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">-->
        <!--<property name="clusterNodes">-->
            <!--<set>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip1}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port1}"></constructor-arg>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip1}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port2}"></constructor-arg>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip2}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port1}"></constructor-arg>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip2}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port2}"></constructor-arg>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip3}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port1}"></constructor-arg>-->
                <!--</bean>-->
                <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
                    <!--<constructor-arg name="host" value="${redis.cluster.node.ip3}"></constructor-arg>-->
                    <!--<constructor-arg name="port" value="${redis.cluster.node.port2}"></constructor-arg>-->
                <!--</bean>-->
            <!--</set>-->
        <!--</property>-->
    <!--</bean>-->
    <!--<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>-->
        <!--<constructor-arg name="poolConfig" ref="jedisPoolConfig"/>-->
        <!--<property name="password" value="${redis.password}"/>-->
    <!--</bean>-->
    <!--<bean id="defaultSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>-->
    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
        <!--<property name="defaultSerializer" ref="defaultSerializer"/>-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
    <!--</bean>-->
    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash;redis配置结束 &ndash;&gt;-->

    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />

</beans>

